# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_example_controllers/State.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class State(genpy.Message):
  _md5sum = "2557e31f2a34e246ce8c881d4f7d2cb2"
  _type = "franka_example_controllers/State"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[3] position
float64[3] position_d
float64[3] orientation
float64[3] orientation_d
float64[7] tau_commanded
float64[3] error_orientation
float64[3] error_position
float64[6] tau__ext"""
  __slots__ = ['position','position_d','orientation','orientation_d','tau_commanded','error_orientation','error_position','tau__ext']
  _slot_types = ['float64[3]','float64[3]','float64[3]','float64[3]','float64[7]','float64[3]','float64[3]','float64[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,position_d,orientation,orientation_d,tau_commanded,error_orientation,error_position,tau__ext

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = [0.] * 3
      if self.position_d is None:
        self.position_d = [0.] * 3
      if self.orientation is None:
        self.orientation = [0.] * 3
      if self.orientation_d is None:
        self.orientation_d = [0.] * 3
      if self.tau_commanded is None:
        self.tau_commanded = [0.] * 7
      if self.error_orientation is None:
        self.error_orientation = [0.] * 3
      if self.error_position is None:
        self.error_position = [0.] * 3
      if self.tau__ext is None:
        self.tau__ext = [0.] * 6
    else:
      self.position = [0.] * 3
      self.position_d = [0.] * 3
      self.orientation = [0.] * 3
      self.orientation_d = [0.] * 3
      self.tau_commanded = [0.] * 7
      self.error_orientation = [0.] * 3
      self.error_position = [0.] * 3
      self.tau__ext = [0.] * 6

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3d().pack(*self.position))
      buff.write(_get_struct_3d().pack(*self.position_d))
      buff.write(_get_struct_3d().pack(*self.orientation))
      buff.write(_get_struct_3d().pack(*self.orientation_d))
      buff.write(_get_struct_7d().pack(*self.tau_commanded))
      buff.write(_get_struct_3d().pack(*self.error_orientation))
      buff.write(_get_struct_3d().pack(*self.error_position))
      buff.write(_get_struct_6d().pack(*self.tau__ext))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.position = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.position_d = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.orientation = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.orientation_d = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 56
      self.tau_commanded = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 24
      self.error_orientation = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.error_position = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 48
      self.tau__ext = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.position.tostring())
      buff.write(self.position_d.tostring())
      buff.write(self.orientation.tostring())
      buff.write(self.orientation_d.tostring())
      buff.write(self.tau_commanded.tostring())
      buff.write(self.error_orientation.tostring())
      buff.write(self.error_position.tostring())
      buff.write(self.tau__ext.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 24
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.position_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.orientation_d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 56
      self.tau_commanded = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 24
      self.error_orientation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.error_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 48
      self.tau__ext = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
