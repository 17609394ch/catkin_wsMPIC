// Generated by gencpp from file franka_example_controllers/State.msg
// DO NOT EDIT!


#ifndef FRANKA_EXAMPLE_CONTROLLERS_MESSAGE_STATE_H
#define FRANKA_EXAMPLE_CONTROLLERS_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_example_controllers
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : position()
    , position_d()
    , orientation()
    , orientation_d()
    , tau_commanded()
    , error_orientation()
    , error_position()
    , tau__ext()  {
      position.assign(0.0);

      position_d.assign(0.0);

      orientation.assign(0.0);

      orientation_d.assign(0.0);

      tau_commanded.assign(0.0);

      error_orientation.assign(0.0);

      error_position.assign(0.0);

      tau__ext.assign(0.0);
  }
  State_(const ContainerAllocator& _alloc)
    : position()
    , position_d()
    , orientation()
    , orientation_d()
    , tau_commanded()
    , error_orientation()
    , error_position()
    , tau__ext()  {
  (void)_alloc;
      position.assign(0.0);

      position_d.assign(0.0);

      orientation.assign(0.0);

      orientation_d.assign(0.0);

      tau_commanded.assign(0.0);

      error_orientation.assign(0.0);

      error_position.assign(0.0);

      tau__ext.assign(0.0);
  }



   typedef boost::array<double, 3>  _position_type;
  _position_type position;

   typedef boost::array<double, 3>  _position_d_type;
  _position_d_type position_d;

   typedef boost::array<double, 3>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<double, 3>  _orientation_d_type;
  _orientation_d_type orientation_d;

   typedef boost::array<double, 7>  _tau_commanded_type;
  _tau_commanded_type tau_commanded;

   typedef boost::array<double, 3>  _error_orientation_type;
  _error_orientation_type error_orientation;

   typedef boost::array<double, 3>  _error_position_type;
  _error_position_type error_position;

   typedef boost::array<double, 6>  _tau__ext_type;
  _tau__ext_type tau__ext;





  typedef boost::shared_ptr< ::franka_example_controllers::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_example_controllers::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::franka_example_controllers::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::franka_example_controllers::State > StatePtr;
typedef boost::shared_ptr< ::franka_example_controllers::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_example_controllers::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_example_controllers::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_example_controllers::State_<ContainerAllocator1> & lhs, const ::franka_example_controllers::State_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.position_d == rhs.position_d &&
    lhs.orientation == rhs.orientation &&
    lhs.orientation_d == rhs.orientation_d &&
    lhs.tau_commanded == rhs.tau_commanded &&
    lhs.error_orientation == rhs.error_orientation &&
    lhs.error_position == rhs.error_position &&
    lhs.tau__ext == rhs.tau__ext;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_example_controllers::State_<ContainerAllocator1> & lhs, const ::franka_example_controllers::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_example_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::franka_example_controllers::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_example_controllers::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_example_controllers::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_example_controllers::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_example_controllers::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_example_controllers::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_example_controllers::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2557e31f2a34e246ce8c881d4f7d2cb2";
  }

  static const char* value(const ::franka_example_controllers::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2557e31f2a34e246ULL;
  static const uint64_t static_value2 = 0xce8c881d4f7d2cb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_example_controllers::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_example_controllers/State";
  }

  static const char* value(const ::franka_example_controllers::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_example_controllers::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] position\n"
"float64[3] position_d\n"
"float64[3] orientation\n"
"float64[3] orientation_d\n"
"float64[7] tau_commanded\n"
"float64[3] error_orientation\n"
"float64[3] error_position\n"
"float64[6] tau__ext\n"
;
  }

  static const char* value(const ::franka_example_controllers::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_example_controllers::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.position_d);
      stream.next(m.orientation);
      stream.next(m.orientation_d);
      stream.next(m.tau_commanded);
      stream.next(m.error_orientation);
      stream.next(m.error_position);
      stream.next(m.tau__ext);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_example_controllers::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_example_controllers::State_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "position_d[]" << std::endl;
    for (size_t i = 0; i < v.position_d.size(); ++i)
    {
      s << indent << "  position_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_d[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "orientation_d[]" << std::endl;
    for (size_t i = 0; i < v.orientation_d.size(); ++i)
    {
      s << indent << "  orientation_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation_d[i]);
    }
    s << indent << "tau_commanded[]" << std::endl;
    for (size_t i = 0; i < v.tau_commanded.size(); ++i)
    {
      s << indent << "  tau_commanded[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau_commanded[i]);
    }
    s << indent << "error_orientation[]" << std::endl;
    for (size_t i = 0; i < v.error_orientation.size(); ++i)
    {
      s << indent << "  error_orientation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.error_orientation[i]);
    }
    s << indent << "error_position[]" << std::endl;
    for (size_t i = 0; i < v.error_position.size(); ++i)
    {
      s << indent << "  error_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.error_position[i]);
    }
    s << indent << "tau__ext[]" << std::endl;
    for (size_t i = 0; i < v.tau__ext.size(); ++i)
    {
      s << indent << "  tau__ext[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau__ext[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_EXAMPLE_CONTROLLERS_MESSAGE_STATE_H
